<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Highlight.js Test Code</title>
    <language>default</language>
    <url>/posts/highlight-test-code/</url>
    <content><![CDATA[<div class="language-notice note modern language-all">
  <p>
    <span lang-type="relative" language="ko">이 게시물은 한글과 영어로 동시에 작성되어 있습니다.</span>
    <span lang-type="relative" language="ko"><br>If you want to see in English, please change the language by clicking the right-bottom gear button.</span>
    <span lang-type="relative" language="en">This post is written in both Korean and English.</span>
    <span lang-type="relative" language="en"><br>한글로 보시려면 페이지 우측 하단의 톱니바퀴 버튼을 눌러 언어를 변경하세요.</span>
  </p>
</div>
<div class="note no-icon flat"><div lang-type="relative" language="en">
<ul>
<li>This article is for testing my blog’s customized highlight color scheme.</li>
<li>All the example source codes are scratched from <a href="https://highlightjs.org/static/demo/">highlight.js official site</a>.</li>
<li>Supported languages and their abbreviations can be found from <a href="https://github.com/highlightjs/highlight.js/blob/main/SUPPORTED_LANGUAGES.md">highlight.js github page</a>.</li>
<li>If you want to test for your own blog, use this <a href="https://github.com/extreme-rearranger/discussion-channel/blob/1c39594f31d20aba1e4b3085dd0d834604e23494/markdown/markdown-code-highlight-test.md">markdown file</a> rather than copying it manually.</li>
</ul>
</div>
<div lang-type="relative" language="ko">
<ul>
<li>이 게시물은 제 블로그의 highlight color scheme을 테스트하기 위한 목적으로 작성되었습니다.</li>
<li>모든 예제 코드는 <a href="https://highlightjs.org/static/demo/">highlight.js 공식 사이트</a>에서 그대로 긁어온 자료입니다.</li>
<li>지원하는 프로그래밍 언어의 종류와 줄임말은 <a href="https://github.com/highlightjs/highlight.js/blob/main/SUPPORTED_LANGUAGES.md">highlight.js 깃헙 페이지</a>에서 확인할 수 있습니다.</li>
<li>만일 직접 테스트해보고 싶으시다면, 공홈에서 수동으로 복붙하지 마시고 이 <a href="https://github.com/extreme-rearranger/discussion-channel/blob/1c39594f31d20aba1e4b3085dd0d834604e23494/markdown/markdown-code-highlight-test.md">마크다운 파일</a>을 다운받아 사용하세요.</li>
</ul>
</div></div>
<h2 id="HTML-XML">HTML, XML</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-tag">body</span> &#123;<span class="attribute">width</span>: <span class="number">500px</span>;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;application/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">$init</span>(<span class="params"></span>) &#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">checked</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- here goes the rest of the page --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Bash">Bash</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###### CONFIG</span></span><br><span class="line">ACCEPTED_HOSTS=<span class="string">&quot;/root/.hag_accepted.conf&quot;</span></span><br><span class="line">BE_VERBOSE=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$UID</span>&quot;</span> -ne 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Superuser rights required&quot;</span></span><br><span class="line"> <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">genApacheConf</span></span>()&#123;</span><br><span class="line"> <span class="built_in">echo</span> -e <span class="string">&quot;# Host <span class="variable">$&#123;HOME_DIR&#125;</span><span class="variable">$1</span>/<span class="variable">$2</span> :&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&quot;quoted&quot;&#x27;</span> | <span class="built_in">tr</span> -d \&quot; &gt; text.txt</span><br></pre></td></tr></table></figure>
<h2 id="C">C++</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* An annoying &quot;Hello World&quot; example */</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; <span class="number">0xFFFF</span>; i++)</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> c = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  unordered_map &lt;string, vector&lt;string&gt; &gt; m;</span><br><span class="line">  m[<span class="string">&quot;key&quot;</span>] = <span class="string">&quot;\\\\&quot;</span>; <span class="comment">// this is an error</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">-2e3</span> + <span class="number">12l</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-+2">C#</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO.Compression;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> disable 414, 3021</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Obsolete(<span class="string">&quot;...&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span> : <span class="title">IInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">int</span>&gt; <span class="title">JustDoIt</span>(<span class="params"><span class="built_in">int</span> count</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Span&lt;<span class="built_in">int</span>&gt; numbers = <span class="keyword">stackalloc</span> <span class="built_in">int</span>[length];</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Hello <span class="subst">&#123;Name&#125;</span>!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(<span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CSS">CSS</h2>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Chunkfive; <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;Chunkfive.otf&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-class">.usertext</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#F0F0F0</span>; <span class="attribute">background</span>: <span class="number">#600</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Chunkfive, sans;</span><br><span class="line">  <span class="attr">--heading-1</span>: <span class="number">30px</span>/<span class="number">32px</span> Helvetica, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> url(print.css);</span><br><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-attr">[href^=http]</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(href)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Markdown">Markdown</h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># hello world</span></span><br><span class="line"></span><br><span class="line">you can write text [<span class="string">with links</span>](<span class="link">http://example.com</span>) inline or [<span class="string">link references</span>][<span class="symbol">1</span>].</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> one <span class="emphasis">_thing_</span> has <span class="emphasis">*em*</span>phasis</span><br><span class="line"><span class="bullet">*</span> two <span class="strong">__things__</span> are <span class="strong">**bold**</span></span><br><span class="line"></span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">http://example.com</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">hello world</span></span><br><span class="line"><span class="section">===========</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">this_is</span> <span class="attr">inline</span>=<span class="string">&quot;xml&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">this_is</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; markdown is so cool</span></span><br><span class="line"></span><br><span class="line"><span class="code">    so are code segments</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">1.</span> one thing (yeah!)</span><br><span class="line"><span class="bullet">2.</span> two thing <span class="code">`i can write code`</span>, and <span class="code">`more`</span> wipee!</span><br></pre></td></tr></table></figure>
<h2 id="Diff">Diff</h2>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">Index: languages/ini.js</span></span><br><span class="line"><span class="comment">===================================================================</span></span><br><span class="line"><span class="comment">--- languages/ini.js    (revision 199)</span></span><br><span class="line"><span class="comment">+++ languages/ini.js    (revision 200)</span></span><br><span class="line"><span class="meta">@@ -1,8 +1,7 @@</span></span><br><span class="line"> hljs.LANGUAGES.ini =</span><br><span class="line"> &#123;</span><br><span class="line">   case_insensitive: true,</span><br><span class="line"><span class="deletion">-  defaultMode:</span></span><br><span class="line"><span class="deletion">-  &#123;</span></span><br><span class="line"><span class="addition">+  defaultMode: &#123;</span></span><br><span class="line">     contains: [&#x27;comment&#x27;, &#x27;title&#x27;, &#x27;setting&#x27;],</span><br><span class="line">     illegal: &#x27;[^\\s]&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">*** /path/to/original timestamp</span></span><br><span class="line"><span class="comment">--- /path/to/new      timestamp</span></span><br><span class="line"><span class="comment">***************</span></span><br><span class="line"><span class="meta">*** 1,3 ****</span></span><br><span class="line"><span class="meta">--- 1,9 ----</span></span><br><span class="line"><span class="addition">+ This is an important</span></span><br><span class="line"><span class="addition">+ notice! It should</span></span><br><span class="line"><span class="addition">+ therefore be located at</span></span><br><span class="line"><span class="addition">+ the beginning of this</span></span><br><span class="line"><span class="addition">+ document!</span></span><br><span class="line"></span><br><span class="line"><span class="addition">! compress the size of the</span></span><br><span class="line"><span class="addition">! changes.</span></span><br><span class="line"></span><br><span class="line">  It is important to spell</span><br></pre></td></tr></table></figure>
<h2 id="Ruby">Ruby</h2>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The Greeter class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">name</span>)</span><br><span class="line">    <span class="variable">@name</span> = name.capitalize</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">salute</span></span><br><span class="line">    puts <span class="string">&quot;Hello <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span>!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">g = <span class="title class_">Greeter</span>.new(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">g.salute</span><br></pre></td></tr></table></figure>
<h2 id="Go">Go</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">float64</span>)</span><br><span class="line">    ch &lt;- <span class="number">1.0e10</span>    <span class="comment">// magic number</span></span><br><span class="line">    x, ok := &lt;- ch</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">`exitting now\`</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="built_in">println</span>(<span class="built_in">len</span>(<span class="string">&quot;hello world!&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="TOML-INI">TOML, INI</h2>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">; boilerplate</span></span><br><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;some_name&quot;</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">&quot;Author&quot;</span>]</span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;This is \</span></span><br><span class="line"><span class="string">a description&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[lib]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="variable">$&#123;NAME&#125;</span></span><br><span class="line"><span class="attr">default</span> = <span class="literal">True</span></span><br><span class="line"><span class="attr">auto</span> = <span class="literal">no</span></span><br><span class="line"><span class="attr">counter</span> = <span class="number">1_000</span></span><br></pre></td></tr></table></figure>
<h2 id="Java">Java</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> John Smith &lt;john.smith@example.com&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> l2f.gameserver.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">strictfp</span> <span class="keyword">class</span> <span class="title class_">L2Char</span> <span class="keyword">extends</span> <span class="title class_">L2Object</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Short</span> <span class="variable">ERROR</span> <span class="operator">=</span> <span class="number">0x0001</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveTo</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">    _ai = <span class="literal">null</span>;</span><br><span class="line">    log(<span class="string">&quot;Should not be called&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> &gt; <span class="number">5</span>) &#123; <span class="comment">// wtf!?</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="JavaScript">JavaScript</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">$initHighlight</span>(<span class="params">block, cls</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cls.<span class="title function_">search</span>(<span class="regexp">/\bno\-highlight\b/</span>) != -<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">process</span>(block, <span class="literal">true</span>, <span class="number">0x0F</span>) +</span><br><span class="line">             <span class="string">` class=&quot;<span class="subst">$&#123;cls&#125;</span>&quot;`</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">/* handle exception */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> / <span class="number">2</span>; i &lt; classes.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">checkCondition</span>(classes[i]) === <span class="literal">undefined</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;undefined&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">web-component</span>&gt;</span>&#123;block&#125;<span class="tag">&lt;/<span class="name">web-component</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span>  $initHighlight;</span><br></pre></td></tr></table></figure>
<h2 id="JSON">JSON</h2>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;apples&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">12000</span><span class="punctuation">,</span> <span class="number">20000</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;...&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sensitive&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;oranges&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">17500</span><span class="punctuation">,</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;...&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sensitive&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<h2 id="Kotlin">Kotlin</h2>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.serialization.Serializable</span><br><span class="line"><span class="keyword">import</span> kotlin.random.Random</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Building</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">House</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> rooms: <span class="built_in">Int</span>? = <span class="number">3</span>,</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">&quot;Palace&quot;</span></span><br><span class="line">) : Building &#123;</span><br><span class="line">    <span class="keyword">var</span> residents: <span class="built_in">Int</span> = <span class="number">4</span></span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            println(<span class="string">&quot;Current residents: <span class="variable">$field</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> field</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">burn</span><span class="params">(evacuation: (<span class="type">people</span>: <span class="type">Int</span>) -&gt; <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">        rooms ?: <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> (evacuation((<span class="number">0.</span>.residents).random()))</span><br><span class="line">            residents = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> house = House(name = <span class="string">&quot;Skyscraper 1&quot;</span>)</span><br><span class="line">    house.burn &#123;</span><br><span class="line">        Random.nextBoolean()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Less">Less</h2>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;fruits&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">@rhythm:</span> <span class="number">1.5em</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-resolution</span>: <span class="number">2dppx</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;<span class="attribute">font-size</span>: <span class="number">125%</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> &gt; <span class="selector-class">.foo</span> + <span class="selector-id">#bar</span><span class="selector-pseudo">:hover</span> <span class="selector-attr">[href*=<span class="string">&quot;less&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>:     <span class="variable">@rhythm</span> <span class="number">0</span> <span class="number">0</span> <span class="variable">@rhythm</span>;</span><br><span class="line">    <span class="attribute">padding</span>:    <span class="built_in">calc</span>(<span class="number">5%</span> + <span class="number">20px</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f00ba7</span> url(<span class="string">http://placehold.alpha-centauri/42.png</span>) no-repeat;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(-<span class="number">135deg</span>, wheat, fuchsia) <span class="meta">!important</span> ;</span><br><span class="line">    <span class="attribute">background-blend-mode</span>: multiply;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="comment">/* ? */</span> <span class="string">&#x27;Omega&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: url(<span class="string">&#x27;../fonts/omega-webfont.woff?v=2.0.2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-baz</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:     inline-block;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Omega&quot;</span>, Alpha, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>:     <span class="string">&quot;\f085&quot;</span>;</span><br><span class="line">    <span class="attribute">color</span>:       <span class="built_in">rgba</span>(<span class="number">98</span>, <span class="number">76</span> <span class="comment">/* or 54 */</span>, <span class="number">231</span>, .<span class="number">75</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Lua">Lua</h2>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">Simple signal/slot implementation</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="keyword">local</span> signal_mt = &#123;</span><br><span class="line">    <span class="built_in">__index</span> = &#123;</span><br><span class="line">        register = <span class="built_in">table</span>.<span class="built_in">insert</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">signal_mt.__index:emit</span><span class="params">(... <span class="comment">--[[ Comment in params ]]</span>)</span></span></span><br><span class="line">    <span class="keyword">for</span> _, slot <span class="keyword">in</span> <span class="built_in">ipairs</span>(<span class="built_in">self</span>) <span class="keyword">do</span></span><br><span class="line">        slot(<span class="built_in">self</span>, ...)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">create_signal</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">setmetatable</span>(&#123;&#125;, signal_mt)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Signal test</span></span><br><span class="line"><span class="keyword">local</span> signal = create_signal()</span><br><span class="line">signal:register(<span class="function"><span class="keyword">function</span><span class="params">(signal, ...)</span></span></span><br><span class="line">    <span class="built_in">print</span>(...)</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line">signal:emit(<span class="string">&#x27;Answer to Life, the Universe, and Everything:&#x27;</span>, <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[==[ [=[ [[</span></span><br><span class="line"><span class="comment">Nested ]]</span></span><br><span class="line"><span class="comment">multi-line ]=]</span></span><br><span class="line"><span class="comment">comment ]==]</span></span><br><span class="line"><span class="string">[==[ Nested</span></span><br><span class="line"><span class="string">[=[ multi-line</span></span><br><span class="line"><span class="string">[[ string</span></span><br><span class="line"><span class="string">]] ]=] ]==]</span></span><br></pre></td></tr></table></figure>
<h2 id="Makefile">Makefile</h2>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Makefile</span></span><br><span class="line"></span><br><span class="line">BUILDDIR      = _build</span><br><span class="line">EXTRAS       ?= <span class="variable">$(BUILDDIR)</span>/extras</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: main clean</span></span><br><span class="line"></span><br><span class="line"><span class="section">main:</span></span><br><span class="line">  @echo <span class="string">&quot;Building main facility...&quot;</span></span><br><span class="line">  build_main <span class="variable">$(BUILDDIR)</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">  rm -rf <span class="variable">$(BUILDDIR)</span>/*</span><br></pre></td></tr></table></figure>
<h2 id="Perl">Perl</h2>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># loads object</span></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">load</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">my</span> $flds = $c-&gt;db_load($id,@_) || <span class="keyword">do</span> &#123;</span><br><span class="line">    Carp::carp <span class="string">&quot;Can`t load (class: $c, id: $id): &#x27;$!&#x27;&quot;</span>; <span class="keyword">return</span> <span class="keyword">undef</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">my</span> $o = $c-&gt;_perl_new();</span><br><span class="line">  $id12 = $id / <span class="number">24</span> / <span class="number">3600</span>;</span><br><span class="line">  $o-&gt;&#123;<span class="string">&#x27;ID&#x27;</span>&#125; = $id12 + <span class="number">123</span>;</span><br><span class="line">  <span class="comment">#$o-&gt;&#123;&#x27;SHCUT&#x27;&#125; = $flds-&gt;&#123;&#x27;SHCUT&#x27;&#125;;</span></span><br><span class="line">  <span class="keyword">my</span> $p = $o-&gt;props;</span><br><span class="line">  <span class="keyword">my</span> $vt;</span><br><span class="line">  $string =~ <span class="regexp">m/^sought_text$/</span>;</span><br><span class="line">  $items = <span class="keyword">split</span> <span class="regexp">//</span>, <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  $string //= <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">my</span> $key (<span class="keyword">keys</span> %$p)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>($&#123;$vt.<span class="string">&#x27;::property&#x27;</span>&#125;) &#123;</span><br><span class="line">      $o-&gt;&#123;$key . <span class="string">&#x27;_real&#x27;</span>&#125; = $flds-&gt;&#123;$key&#125;;</span><br><span class="line">      <span class="keyword">tie</span> $o-&gt;&#123;$key&#125;, <span class="string">&#x27;CMSBuilder::Property&#x27;</span>, $o, $key;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  $o-&gt;save <span class="keyword">if</span> <span class="keyword">delete</span> $o-&gt;&#123;<span class="string">&#x27;_save_after_load&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># GH-117</span></span><br><span class="line">  <span class="keyword">my</span> $g = <span class="keyword">glob</span>(<span class="string">&quot;/usr/bin/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="language-mojolicious"><span class="meta">__DATA__</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-mojolicious"></span></span><span class="comment">@@ layouts/default.html.ep</span><span class="language-mojolicious"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-mojolicious"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-mojolicious"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-mojolicious">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%=</span><span class="language-perl"> title </span><span class="language-xml">%&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-mojolicious">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>&lt;%=</span><span class="language-perl"> content </span><span class="language-xml">%&gt;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-mojolicious"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-mojolicious"></span><span class="meta">__END__</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">=head1 NAME</span></span><br><span class="line"><span class="comment">POD till the end of file</span></span><br></pre></td></tr></table></figure>
<h2 id="Objective-C">Objective-C</h2>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;Dependency.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">WorldDataSource</span></span></span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line">- (<span class="built_in">NSString</span>*)worldName;</span><br><span class="line"><span class="keyword">@required</span></span><br><span class="line">- (<span class="type">BOOL</span>)allowsToLive;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *title;</span><br><span class="line">- (<span class="keyword">IBAction</span>) show;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="PHP">PHP</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;Zend/Uri/Http.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Location</span>\<span class="title class_">Web</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">_factory</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">URI</span> <span class="keyword">extends</span> <span class="title">BaseURI</span> <span class="keyword">implements</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$st1</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ME</span> = <span class="string">&quot;Yo&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$list</span> = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a URI</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> URI</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_factory</span>(<span class="params"><span class="variable">$stats</span> = <span class="keyword">array</span>(<span class="params"></span>), <span class="variable">$uri</span> = <span class="string">&#x27;http&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span>;</span><br><span class="line">        <span class="variable">$uri</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;:&#x27;</span>, <span class="variable">$uri</span>, <span class="number">0b10</span>);</span><br><span class="line">        <span class="variable">$schemeSpecific</span> = <span class="keyword">isset</span>(<span class="variable">$uri</span>[<span class="number">1</span>]) ? <span class="variable">$uri</span>[<span class="number">1</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$desc</span> = <span class="string">&#x27;Multi</span></span><br><span class="line"><span class="string">line description&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Security check</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">ctype_alnum</span>(<span class="variable">$scheme</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Zend_Uri_Exception</span>(<span class="string">&#x27;Illegal scheme&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">var</span> = <span class="number">0</span> - <span class="built_in">self</span>::<span class="variable">$st</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">list</span> = <span class="keyword">list</span>(<span class="title function_ invoke__">Array</span>(<span class="string">&quot;1&quot;</span>=&gt; <span class="number">2</span>, <span class="number">2</span>=&gt;<span class="built_in">self</span>::<span class="variable constant_">ME</span>, <span class="number">3</span> =&gt; \Location\Web\URI::<span class="variable language_">class</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">&#x27;uri&#x27;</span>   =&gt; <span class="variable">$uri</span>,</span><br><span class="line">            <span class="string">&#x27;value&#x27;</span> =&gt; <span class="literal">null</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> (<span class="variable">$key</span>) &#123;</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="string">&#x27;Integer 1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span> =&gt; <span class="string">&#x27;String 1&#x27;</span>,</span><br><span class="line">    <span class="literal">true</span> =&gt; <span class="string">&#x27;Bool true&#x27;</span>,</span><br><span class="line">    [] =&gt; <span class="string">&#x27;Empty array&#x27;</span>,</span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="string">&#x27;Array [1]&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Foo</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> Test = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> (<span class="variable">$key</span>) &#123;</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="string">&#x27;Integer 1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span> =&gt; <span class="string">&#x27;String 1&#x27;</span>,</span><br><span class="line">    <span class="literal">true</span> =&gt; <span class="string">&#x27;Bool true&#x27;</span>,</span><br><span class="line">    [] =&gt; <span class="string">&#x27;Empty array&#x27;</span>,</span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="string">&#x27;Array [1]&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> URI::<span class="variable constant_">ME</span> . URI::<span class="variable">$st1</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__halt_compiler</span> () ; datahere</span><br><span class="line">datahere</span><br><span class="line">datahere */</span><br><span class="line">datahere</span><br></pre></td></tr></table></figure>
<h2 id="Python">Python</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization(<span class="params">roles=[<span class="string">&quot;ADMIN&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">somefunc</span>(<span class="params">param1=<span class="string">&#x27;&#x27;</span>, param2=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">r&#x27;&#x27;&#x27;A docstring&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Gre\&#x27;ater&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span> + <span class="number">0b10l</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">&#x27;&#x27;&#x27;interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="R">R</h2>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">require<span class="punctuation">(</span>stats<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x27; Compute different averages</span></span><br><span class="line"><span class="comment">#&#x27;</span></span><br><span class="line"><span class="comment">#&#x27; <span class="doctag">@param <span class="variable">x</span></span> <span class="keyword">\code</span>&#123;numeric&#125; vector of sample data</span></span><br><span class="line"><span class="comment">#&#x27; <span class="doctag">@param <span class="variable">type</span></span> <span class="keyword">\code</span>&#123;character&#125; vector of length 1 specifying the average type</span></span><br><span class="line"><span class="comment">#&#x27; <span class="doctag">@return</span> <span class="keyword">\code</span>&#123;centre&#125; returns the sample average according to the chosen method.</span></span><br><span class="line"><span class="comment">#&#x27; <span class="doctag">@examples</span></span></span><br><span class="line"><span class="comment">#&#x27; centre(rcauchy(10), &quot;mean&quot;)</span></span><br><span class="line"><span class="comment">#&#x27; <span class="doctag">@export</span></span></span><br><span class="line">centre <span class="operator">&lt;-</span> <span class="keyword">function</span><span class="punctuation">(</span>x<span class="punctuation">,</span> type<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="built_in">switch</span><span class="punctuation">(</span>type<span class="punctuation">,</span></span><br><span class="line">         mean <span class="operator">=</span> mean<span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">         median <span class="operator">=</span> median<span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">         trimmed <span class="operator">=</span> mean<span class="punctuation">(</span>x<span class="punctuation">,</span> trim <span class="operator">=</span> <span class="number">.1</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">x <span class="operator">&lt;-</span> rcauchy<span class="punctuation">(</span><span class="number">10</span><span class="punctuation">)</span></span><br><span class="line">centre<span class="punctuation">(</span>x<span class="punctuation">,</span> <span class="string">&quot;mean&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">library<span class="punctuation">(</span>ggplot2<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">models <span class="operator">&lt;-</span> tibble<span class="operator">::</span>tribble<span class="punctuation">(</span></span><br><span class="line">  <span class="operator">~</span>model_name<span class="punctuation">,</span>    <span class="operator">~</span> formula<span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;length-width&quot;</span><span class="punctuation">,</span> Sepal.Length <span class="operator">~</span> Petal.Width <span class="operator">+</span> Petal.Length<span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;interaction&quot;</span><span class="punctuation">,</span>  Sepal.Length <span class="operator">~</span> Petal.Width <span class="operator">*</span> Petal.Length</span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">iris <span class="operator">%&gt;%</span> </span><br><span class="line">  nest_by<span class="punctuation">(</span>Species<span class="punctuation">)</span> <span class="operator">%&gt;%</span> </span><br><span class="line">  left_join<span class="punctuation">(</span>models<span class="punctuation">,</span> by <span class="operator">=</span> character<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span> <span class="operator">%&gt;%</span> </span><br><span class="line">  rowwise<span class="punctuation">(</span>Species<span class="punctuation">,</span> model_name<span class="punctuation">)</span> <span class="operator">%&gt;%</span> </span><br><span class="line">  mutate<span class="punctuation">(</span>model <span class="operator">=</span> <span class="built_in">list</span><span class="punctuation">(</span>lm<span class="punctuation">(</span>formula<span class="punctuation">,</span> data <span class="operator">=</span> data<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span> <span class="operator">%&gt;%</span> </span><br><span class="line">  summarise<span class="punctuation">(</span>broom<span class="operator">::</span>glance<span class="punctuation">(</span>model<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#&gt; `summarise()` regrouping output by &#x27;Species&#x27;, &#x27;model_name&#x27; (override with `.groups` argument)</span></span><br><span class="line"><span class="comment">#&gt; # A tibble: 6 x 13</span></span><br><span class="line"><span class="comment">#&gt; # Groups:   Species, model_name [6]</span></span><br><span class="line"><span class="comment">#&gt;   Species model_name r.squared adj.r.squared sigma statistic  p.value    df</span></span><br><span class="line"><span class="comment">#&gt;   &lt;fct&gt;   &lt;chr&gt;          &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;int&gt;</span></span><br><span class="line"><span class="comment">#&gt; 1 setosa  length-wi…     0.112        0.0739 0.339      2.96 6.18e- 2     3</span></span><br><span class="line"><span class="comment">#&gt; 2 setosa  interacti…     0.133        0.0760 0.339      2.34 8.54e- 2     4</span></span><br><span class="line"><span class="comment">#&gt; 3 versic… length-wi…     0.574        0.556  0.344     31.7  1.92e- 9     3</span></span><br><span class="line"><span class="comment">#&gt; 4 versic… interacti…     0.577        0.549  0.347     20.9  1.11e- 8     4</span></span><br><span class="line"><span class="comment">#&gt; 5 virgin… length-wi…     0.747        0.736  0.327     69.3  9.50e-15     3</span></span><br><span class="line"><span class="comment">#&gt; 6 virgin… interacti…     0.757        0.741  0.323     47.8  3.54e-14     4</span></span><br><span class="line"><span class="comment">#&gt; # … with 5 more variables: logLik &lt;dbl&gt;, AIC &lt;dbl&gt;, BIC &lt;dbl&gt;, deviance &lt;dbl&gt;,</span></span><br><span class="line"><span class="comment">#&gt; #   df.residual &lt;int&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Rust">Rust</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    Start,</span><br><span class="line">    Transient,</span><br><span class="line">    Closed,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">From</span>&lt;&amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>&gt; <span class="keyword">for</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">from</span>(s: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> s &#123;</span><br><span class="line">            <span class="string">&quot;start&quot;</span> =&gt; State::Start,</span><br><span class="line">            <span class="string">&quot;closed&quot;</span> =&gt; State::Closed,</span><br><span class="line">            _ =&gt; <span class="built_in">unreachable!</span>(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SCSS">SCSS</h2>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;compass/reset&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// variables</span></span><br><span class="line"><span class="variable">$colorGreen</span>: <span class="number">#008000</span>;</span><br><span class="line"><span class="variable">$colorGreenDark</span>: <span class="built_in">darken</span>(<span class="variable">$colorGreen</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> container &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">980px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mixins with parameters</span></span><br><span class="line"><span class="keyword">@mixin</span> button(<span class="variable">$color</span>:green) &#123;</span><br><span class="line">    <span class="keyword">@if</span> (<span class="variable">$color</span> == green) &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#008000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@else</span> if (<span class="variable">$color</span> == red) &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#B22222</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> button(red);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-class">.navbar</span>,</span><br><span class="line"><span class="selector-id">#header</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;input&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Helvetica Neue&quot;</span>, Arial, sans-serif;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row-12</span> &gt; <span class="selector-attr">[class*=<span class="string">&quot;spans&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#B5C583</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nested definitions</span></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: &#123;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">5px</span>; <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">float</span>: left; <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="selector-class">.home</span> &#123;</span><br><span class="line">          <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://placehold.it/20&#x27;</span>) scroll no-repeat <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .container;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$colorGreen</span>;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: <span class="variable">$colorGreenDark</span>; &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: <span class="number">#c458cb</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">5</span> &#123;</span><br><span class="line">    <span class="selector-class">.span</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">20px</span>*<span class="variable">$i</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> mobile &#123;</span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">600px</span>) &#123;</span><br><span class="line">    <span class="keyword">@content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Shell-Session">Shell Session</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$EDITOR</span></span></span><br><span class="line">vim</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout main</span></span><br><span class="line">Switched to branch &#x27;main&#x27;</span><br><span class="line">Your branch is up-to-date with &#x27;origin/main&#x27;.</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push</span></span><br><span class="line">Everything up-to-date</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;All</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string">done!&#x27;</span></span></span><br><span class="line">All</span><br><span class="line">done!</span><br></pre></td></tr></table></figure>
<h2 id="SQL">SQL</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;topic&quot; (</span><br><span class="line">    &quot;id&quot; <span class="type">integer</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    &quot;forum_id&quot; <span class="type">integer</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    &quot;subject&quot; <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &quot;topic&quot;</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> forum_id <span class="keyword">FOREIGN</span> KEY (&quot;forum_id&quot;)</span><br><span class="line"><span class="keyword">REFERENCES</span> &quot;forum&quot; (&quot;id&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Initials</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> &quot;topic&quot; (&quot;forum_id&quot;, &quot;subject&quot;)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">2</span>, <span class="string">&#x27;D&#x27;&#x27;artagnian&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Swift">Swift</h2>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">class</span> <span class="title class_">Person</span>: <span class="title class_">Entity</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span>!</span><br><span class="line">  <span class="keyword">var</span> age:  <span class="type">Int</span>!</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>, <span class="params">age</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="comment">/* <span class="comment">/* ... */</span> */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Return a descriptive string for this person</span></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">description</span>(<span class="params">offset</span>: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;<span class="subst">\(name)</span> is <span class="subst">\(age <span class="operator">+</span> offset)</span> years old&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="YAML">YAML</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># comment</span></span><br><span class="line"><span class="attr">string_1:</span> <span class="string">&quot;Bar&quot;</span></span><br><span class="line"><span class="attr">string_2:</span> <span class="string">&#x27;bar&#x27;</span></span><br><span class="line"><span class="attr">string_3:</span> <span class="string">bar</span></span><br><span class="line"><span class="attr">inline_keys_ignored:</span> <span class="string">sompath/name/file.jpg</span></span><br><span class="line"><span class="attr">keywords_in_yaml:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">false</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">TRUE</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">FALSE</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">21</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">21.0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!!str</span> <span class="number">123</span></span><br><span class="line"><span class="attr">&quot;quoted_key&quot;:</span> <span class="meta">&amp;foobar</span></span><br><span class="line">  <span class="attr">bar:</span> <span class="string">foo</span></span><br><span class="line">  <span class="attr">foo:</span></span><br><span class="line">  <span class="attr">&quot;foo&quot;:</span> <span class="string">bar</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reference:</span> <span class="meta">*foobar</span></span><br><span class="line"></span><br><span class="line"><span class="attr">multiline_1:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  Multiline</span></span><br><span class="line"><span class="string">  String</span></span><br><span class="line"><span class="string"></span><span class="attr">multiline_2:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  Multiline</span></span><br><span class="line"><span class="string">  String</span></span><br><span class="line"><span class="string"></span><span class="attr">multiline_3:</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">  Multiline string</span></span><br><span class="line"><span class="string">  &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ansible_variables:</span> <span class="string">&quot;foo <span class="template-variable">&#123;&#123;variable&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">array_nested:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">a</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">b:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">c:</span> <span class="number">2</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">b</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">comment</span></span><br></pre></td></tr></table></figure>
<h2 id="TypeScript">TypeScript</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="attr">myValue</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">init: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">myValue</span> = init;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span> <span class="title class_">MyModule</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> <span class="keyword">extends</span> <span class="title class_">Other</span> &#123;</span><br><span class="line">    <span class="attr">myProperty</span>: <span class="built_in">any</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> magicNumber <span class="built_in">number</span>;</span><br><span class="line">myArray.<span class="title function_">forEach</span>(<span class="function">() =&gt;</span> &#123; &#125;); <span class="comment">// fat arrow syntax</span></span><br></pre></td></tr></table></figure>
<h2 id="Visual-Basic-NET">Visual Basic .NET</h2>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Imports</span> System</span><br><span class="line"><span class="keyword">Imports</span> System.IO</span><br><span class="line"><span class="meta">#<span class="keyword">Const</span> DEBUG = True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Namespace</span> Highlighter.Test</span><br><span class="line">  <span class="comment">&#x27;&#x27;&#x27; <span class="doctag">&lt;summary&gt;</span>This is an example class.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">  <span class="keyword">Public</span> <span class="keyword">Class</span> Program</span><br><span class="line">    <span class="keyword">Protected</span> <span class="keyword">Shared</span> hello <span class="keyword">As</span> <span class="type">Integer</span> = <span class="number">3</span></span><br><span class="line">    <span class="keyword">Private</span> <span class="keyword">Const</span> ABC <span class="keyword">As</span> <span class="type">Boolean</span> = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">Region</span> &quot;Code&quot;</span></span><br><span class="line">    <span class="comment">&#x27; Cheers!</span></span><br><span class="line">    &lt;STAThread()&gt; _</span><br><span class="line">    <span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Sub</span> Main(<span class="keyword">ByVal</span> args() <span class="keyword">As</span> <span class="type">String</span>, <span class="keyword">ParamArray</span> arr <span class="keyword">As</span> <span class="type">Object</span>) <span class="keyword">Handles</span> Form1.Click</span><br><span class="line">      <span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">Resume</span> <span class="keyword">Next</span></span><br><span class="line">      <span class="keyword">If</span> ABC <span class="keyword">Then</span></span><br><span class="line">        <span class="keyword">While</span> ABC : Console.WriteLine() : <span class="keyword">End</span> <span class="keyword">While</span></span><br><span class="line">        <span class="keyword">For</span> i <span class="keyword">As</span> <span class="type">Long</span> = <span class="number">0</span> <span class="keyword">To</span> <span class="number">1000</span> <span class="keyword">Step</span> <span class="number">123</span></span><br><span class="line">          <span class="keyword">Try</span></span><br><span class="line">            System.Windows.Forms.MessageBox.Show(<span class="built_in">CInt</span>(<span class="string">&quot;1&quot;</span>).ToString())</span><br><span class="line">          <span class="keyword">Catch</span> ex <span class="keyword">As</span> Exception       <span class="comment">&#x27; What are you doing? Well...</span></span><br><span class="line">            <span class="keyword">Dim</span> exp = CType(ex, IOException)</span><br><span class="line">           <span class="comment"> REM ORZ</span></span><br><span class="line">            <span class="keyword">Return</span></span><br><span class="line">          <span class="keyword">End</span> <span class="keyword">Try</span></span><br><span class="line">        <span class="keyword">Next</span></span><br><span class="line">      <span class="keyword">Else</span></span><br><span class="line">        <span class="keyword">Dim</span> l <span class="keyword">As</span> <span class="built_in">New</span> System.Collections.List&lt;<span class="type">String</span>&gt;()</span><br><span class="line">        <span class="keyword">SyncLock</span> l</span><br><span class="line">          <span class="keyword">If</span> <span class="built_in">TypeOf</span> l <span class="built_in">Is</span> <span class="type">Decimal</span> <span class="built_in">And</span> l <span class="built_in">IsNot</span> <span class="literal">Nothing</span> <span class="keyword">Then</span></span><br><span class="line">            <span class="keyword">RemoveHandler</span> button1.Paint, <span class="keyword">delegate</span></span><br><span class="line">          <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">          <span class="keyword">Dim</span> d = <span class="built_in">New</span> System.Threading.Thread(<span class="built_in">AddressOf</span> ThreadProc)</span><br><span class="line">          <span class="keyword">Dim</span> a = <span class="built_in">New</span> Action(<span class="keyword">Sub</span>(x, y) x + y)</span><br><span class="line">          <span class="keyword">Static</span> u = <span class="keyword">From</span> x <span class="keyword">As</span> <span class="type">String</span> <span class="keyword">In</span> l <span class="keyword">Select</span> x.Substring(<span class="number">2</span>, <span class="number">4</span>) <span class="keyword">Where</span> x.Length &gt; <span class="number">0</span></span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">SyncLock</span></span><br><span class="line">        <span class="keyword">Do</span> : Laugh() : <span class="keyword">Loop</span> <span class="keyword">Until</span> hello = <span class="number">4</span></span><br><span class="line">      <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"><span class="meta">#<span class="keyword">End</span> <span class="keyword">Region</span></span></span><br><span class="line">  <span class="keyword">End</span> <span class="keyword">Class</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Namespace</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>test code</tag>
        <tag>highlight.js</tag>
        <tag>syntax highlighting</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <language>en</language>
    <url>/posts/en/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<!-- polygon(5px 10px, 20px 10px, 30px 0, 40px 10px, 
calc(100% - 5px) 10px, calc(100% - 3px) 11px, calc(100% - 1px) 13px, 100% 15px, 
100% calc(100% - 5px), calc(100% - 1px) calc(100% - 3px), calc(100% - 3px) calc(100% - 1px), calc(100% - 5px) 100%, 
5px 100%, 3px calc(100% - 1px), 1px calc(100% - 3px), 0 calc(100% - 5px), 0 15px, 1px 13px, 3px 11px, 5px 10px) -->
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>test code</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <language>ko</language>
    <url>/posts/ko/hello-world/</url>
    <content><![CDATA[<p><a href="https://hexo.io/ko/">Hexo</a>에 오신 것을 환영합니다! 이 게시물은 Hexo 기본 템플릿의 첫 게시물에 대한 번역본입니다. 자세한 내용은 <a href="https://hexo.io/ko/docs/index.html">Hexo 문서</a>에서 확인하세요. Hexo 사용 시 문제가 발생하면 <a href="https://hexo.io/ko/docs/troubleshooting.html">troubleshooting</a> 에서 답을 찾거나 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>를 통해 문의할 수 있습니다.</p>
<h2 id="빠른-시작">빠른 시작</h2>
<h3 id="새-게시물-만들기">새 게시물 만들기</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>추가 정보: <a href="https://hexo.io/ko/docs/writing.html">Writing</a></p>
<h3 id="서버-실행">서버 실행</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>추가 정보: <a href="https://hexo.io/ko/docs/server.html">Server</a></p>
<h3 id="정적-파일-생성">정적 파일 생성</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>추가 정보: <a href="https://hexo.io/ko/docs/generating.html">Generating</a></p>
<h3 id="원격-사이트로-배포">원격 사이트로 배포</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>추가 정보: <a href="https://hexo.io/ko/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>test code</tag>
      </tags>
  </entry>
</search>
