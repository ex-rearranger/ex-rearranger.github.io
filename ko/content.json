{"pages":[{"title":"About","text":"본 블로그는 Hexo Butterfly 테마를 일부 변형한 것으로, 코드는 여기에서 확인할 수 있습니다. This blog is based on Hexo Butterfly theme with some modifications. You can check the code here. 프론트엔드 쪽 지식이 거의 전무합니다. 고로, 제가 수정한 블로그 코드가 틀린 것 같다는 생각이 든다면 그게 정답ㅎㅎ Almost NO frontend knowledge in my brain. If my code seems wrong, you’re 100% right:) 영어 실력 향상을 위해 영어로도 글을 쓸 생각입니다. 보다 정확한/적절한 표현이 있다면 언제든 알려주세요! Trying to write in both Korean and English to improve english skill. Please let me know for more correct and proper english expressions anytime! #page h1.page-title::before { font-family: \"Font Awesome 6 Free\"; content: \"\\f004\"; padding-right: 0.625em; display: inline-block; -webkit-font-smoothing: antialiased; text-rendering: optimizeLegibility; -moz-osx-font-smoothing: grayscale; font-feature-settings: 'liga'; }","link":"/about/index.html"},{"title":"","text":"{\"name\":\"App\",\"icons\":[{\"src\":\"/android-icon-36x36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\",\"density\":\"0.75\"},{\"src\":\"/android-icon-48x48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\",\"density\":\"1.0\"},{\"src\":\"/android-icon-72x72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\",\"density\":\"1.5\"},{\"src\":\"/android-icon-96x96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\",\"density\":\"2.0\"},{\"src\":\"/android-icon-144x144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\",\"density\":\"3.0\"},{\"src\":\"/android-icon-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\",\"density\":\"4.0\"},{\"src\":\"/android-chrome-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"/android-chrome-512x512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"theme_color\":\"#ffffff\",\"background_color\":\"#ffffff\",\"display\":\"standalone\"}","link":"/img/favicon_io/manifest.json"},{"title":"Categories","text":"","link":"/ko/categories/index.html"},{"title":"Tags","text":"","link":"/ko/tags/index.html"},{"title":"","text":"/** * Generate search database * Refer to hexo-generator-searchdb * https://github.com/next-theme/hexo-generator-searchdb/blob/main/dist/search.js * * Modify w/ adding `language` to search database */ 'use strict'; const { stripHTML } = require('hexo-util'); function savedb(article, config, isPost) { const data = {}; if (article.title) { data.title = article.title; } data.language = article.lang || article.language || 'default'; if (article.path) { data.url = encodeURI(config.root + article.path); } if (config.search.content !== false) { if (config.search.format === 'raw') { data.content = article._content; } else { data.content = article.content.replace(/.*?/g, ''); if (config.search.format === 'striptags') { data.content = stripHTML(data.content); } } } else { data.content = ''; } if (!isPost) { return data; } if (article.categories && article.categories.length > 0) { data.categories = article.categories.map(category => category.name); } if (article.tags && article.tags.length > 0) { data.tags = article.tags.map(tag => tag.name); } return data; } module.exports = function(locals, config) { const searchfield = config.search.field; const database = []; if (searchfield === 'all' || searchfield === 'post') { locals.posts.each(post => { const data = savedb(post, config, true); database.push(data); }); } if (searchfield === 'all' || searchfield === 'page') { locals.pages.each(page => { const data = savedb(page, config); database.push(data); }); } return database; };","link":"/js/hexo-generator-searchdb-custom/lib/database.js"},{"title":"","text":"/** * Refer to hexo-generator-searchdb * https://github.com/next-theme/hexo-generator-searchdb/blob/main/dist/search.js * * First Modified by hexo-theme-butterfly * Then Add the ability to search by language, tags, and categories */ class LocalSearch { constructor ({ path = '', unescape = false, top_n_per_article = 1 }) { this.path = path this.unescape = unescape this.top_n_per_article = top_n_per_article this.isfetched = false this.datas = null } getIndexByWord (words, text, caseSensitive = false) { const index = [] const included = new Set() if (!caseSensitive) { text = text.toLowerCase() } words.forEach(word => { if (this.unescape) { const div = document.createElement('div') div.innerText = word word = div.innerHTML } const wordLen = word.length if (wordLen === 0) return let startPosition = 0 let position = -1 if (!caseSensitive) { word = word.toLowerCase() } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({ position, word }) included.add(word) startPosition = position + wordLen } }) // Sort index by position of keyword index.sort((left, right) => { if (left.position !== right.position) { return left.position - right.position } return right.word.length - left.word.length }) return [index, included] } // Merge hits into slices mergeIntoSlice (start, end, index) { let item = index[0] let { position, word } = item const hits = [] const count = new Set() while (position + word.length position) { index.shift() } else { break } } } return { hits, start, end, count: count.size } } // Highlight title and content highlightKeyword (val, slice) { let result = '' let index = slice.start for (const { position, length } of slice.hits) { result += val.substring(index, position) index = position + length result += `${val.substr(position, length)}` } result += val.substring(index, slice.end) return result } getResultItems (keywords) { const resultItems = [] this.datas.forEach(({ title, language, tags, categories, content, url }) => { // The number of different keywords included in the article. const [indexOfTitle, keysOfTitle] = this.getIndexByWord(keywords, title) const indexAndkeysOfTags = tags.map(tag => this.getIndexByWord(keywords, tag)) const indexAndkeydOfCategories = categories.map(cat => this.getIndexByWord(keywords, cat)) const [indexOfContent, keysOfContent] = this.getIndexByWord(keywords, content) // Change includedCount into weighted value (title: 3, tags: 2, categories: 2, content: 1) // const includedCount = new Set([...keysOfTitle, ...keysOfContent]).size // ORIGINAL const includedCount = keysOfTitle.size * 3 + indexAndkeysOfTags.reduce((acc, [_, keys]) => acc + keys.size, 0) * 2 + indexAndkeydOfCategories.reduce((acc, [_, keys]) => acc + keys.size, 0) * 2 + keysOfContent.size // Show search results // const hitCount = indexOfTitle.length + indexOfContent.length // ORIGINAL const hitCount = indexOfTitle.length + indexOfContent.length + indexAndkeysOfTags.reduce((acc, [index, _]) => acc + index.length, 0) + indexAndkeydOfCategories.reduce((acc, [index, _]) => acc + index.length, 0) if (hitCount === 0) return const slicesOfTitle = [] if (indexOfTitle.length !== 0) { slicesOfTitle.push(this.mergeIntoSlice(0, title.length, indexOfTitle)) } const slicesOfTags = [] indexAndkeysOfTags.forEach((indexAndkeysOfTag, index) => { const [indexOfTag, _] = indexAndkeysOfTag if (indexOfTag.length !== 0) { slicesOfTags.push(this.mergeIntoSlice(0, tags[index].length, indexOfTag)) } else { slicesOfTags.push(null) } }) const slicesOfCategories = [] indexAndkeydOfCategories.forEach((indexAndkeydOfCategory, index) => { const [indexOfCategory, _] = indexAndkeydOfCategory if (indexOfCategory.length !== 0) { slicesOfCategories.push(this.mergeIntoSlice(0, categories[index].length, indexOfCategory)) } else { slicesOfCategories.push(null) } }) let slicesOfContent = [] while (indexOfContent.length !== 0) { const item = indexOfContent[0] const { position } = item // Cut out 120 characters. The maxlength of .search-input is 80. const start = Math.max(0, position - 20) const end = Math.min(content.length, position + 100) slicesOfContent.push(this.mergeIntoSlice(start, end, indexOfContent)) } // Sort slices in content by included keywords' count and hits' count slicesOfContent.sort((left, right) => { if (left.count !== right.count) { return right.count - left.count } else if (left.hits.length !== right.hits.length) { return right.hits.length - left.hits.length } return left.start - right.start }) // Select top N slices in content const upperBound = parseInt(this.top_n_per_article, 10) if (upperBound >= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound) } let resultItem = '' url = new URL(url, location.origin) url.searchParams.append('highlight', keywords.join(' ')) if (slicesOfTitle.length !== 0) { resultItem += `${this.highlightKeyword(title, slicesOfTitle[0])}` } else { resultItem += `${title}` } resultItem += '' if (slicesOfTags.filter(slice => slice).length !== 0) { resultItem += `[Tags] ` slicesOfTags.forEach((slice, index) => { if (slice) { resultItem += `${this.highlightKeyword(tags[index], slice)}, ` } }) resultItem = resultItem.slice(0, -2) + '' } if (slicesOfCategories.filter(slice => slice).length !== 0) { resultItem += `[Categories] ` slicesOfCategories.forEach((slice, index) => { if (slice) { resultItem += `${this.highlightKeyword(categories[index], slice)}, ` } }) resultItem = resultItem.slice(0, -2) + '' } resultItem += '' slicesOfContent.forEach(slice => { resultItem += `${this.highlightKeyword(content, slice)}...` }) resultItem += '' resultItems.push({ item: resultItem, id: resultItems.length, hitCount, includedCount, language }) }) return resultItems } fetchData () { const isXml = !this.path.endsWith('json') fetch(this.path) .then(response => response.text()) .then(res => { // Get the contents from search data this.isfetched = true this.datas = isXml ? [...new DOMParser().parseFromString(res, 'text/xml').querySelectorAll('entry')].map(element => ({ title: element.querySelector('title').textContent, language: element.querySelector('language').textContent, tags: element.querySelector('tags').textContent, categories: element.querySelector('categories').textContent, content: element.querySelector('content').textContent, url: element.querySelector('url').textContent })) : JSON.parse(res) // Only match articles with non-empty titles this.datas = this.datas.filter(data => data.title).map(data => { data.title = data.title.trim() data.tags = data.tags ? data.tags.trim().replace(/\\n[\\s]+/g, '\\n').split('\\n') : [] data.categories = data.categories ? data.categories.trim().replace(/\\n[\\s]+/g, '\\n').split('\\n') : [] data.content = data.content ? data.content.trim().replace(/]+>/g, '') : '' data.url = decodeURIComponent(data.url).replace(/\\/{2,}/g, '/') return data }) // Remove loading animation window.dispatchEvent(new Event('search:loaded')) }) } // Highlight by wrapping node in mark elements with the given class name highlightText (node, slice, className) { const val = node.nodeValue let index = slice.start const children = [] for (const { position, length } of slice.hits) { const text = document.createTextNode(val.substring(index, position)) index = position + length const mark = document.createElement('mark') mark.className = className mark.appendChild(document.createTextNode(val.substr(position, length))) children.push(text, mark) } node.nodeValue = val.substring(index, slice.end) children.forEach(element => { node.parentNode.insertBefore(element, node) }) } // Highlight the search words provided in the url in the text highlightSearchWords (body) { const params = new URL(location.href).searchParams.get('highlight') const keywords = params ? params.split(' ') : [] if (!keywords.length || !body) return const walk = document.createTreeWalker(body, NodeFilter.SHOW_TEXT, null) const allNodes = [] while (walk.nextNode()) { if (!walk.currentNode.parentNode.matches('button, select, textarea, .mermaid')) allNodes.push(walk.currentNode) } allNodes.forEach(node => { const [indexOfNode] = this.getIndexByWord(keywords, node.nodeValue) if (!indexOfNode.length) return const slice = this.mergeIntoSlice(0, node.nodeValue.length, indexOfNode) this.highlightText(node, slice, 'search-keyword') }) } } window.addEventListener('load', () => { // Search const { path, top_n_per_article, unescape, languages } = GLOBAL_CONFIG.localSearch const localSearch = new LocalSearch({ path, top_n_per_article, unescape }) const currentLanguage = document.documentElement.getAttribute('page-lang') === 'default' ? document.documentElement.getAttribute('lang') : document.documentElement.getAttribute('page-lang') const input = document.querySelector('#local-search-input input') const statsItem = document.getElementById('local-search-stats-wrap') const $loadingStatus = document.getElementById('loading-status') const isXml = !path.endsWith('json') const inputEventFunction = () => { if (!localSearch.isfetched) return let searchText = input.value.trim().toLowerCase() isXml && (searchText = searchText.replace(//g, '&gt;')) if (searchText !== '') $loadingStatus.innerHTML = '' const keywords = searchText.split(/[-\\s]+/) const container = document.getElementById('local-search-results') const siteLang = document.querySelector('html').getAttribute('lang') || document.querySelector('html').getAttribute('page-lang') let resultItems = [] if (searchText.length > 0) { // Perform local searching resultItems = localSearch.getResultItems(keywords) } if (keywords.length === 1 && keywords[0] === '') { container.textContent = '' statsItem.textContent = '' } else if (resultItems.length === 0) { container.textContent = '' const statsDiv = document.createElement('div') statsDiv.className = 'search-result-stats' // statsDiv.textContent = languages.hits_empty.replace(/\\$\\{query}/, searchText) statsDiv.innerHTML = languages.map((item) => { if (item.lang === currentLanguage) { return `${item.hits_empty.replace(/\\$\\{query}/, searchText)}` } else { return `${item.hits_empty.replace(/\\$\\{query}/, searchText)}` } }).join('') statsItem.innerHTML = statsDiv.outerHTML } else { resultItems.sort((left, right) => { left_count = (siteLang === left.language) || left.language === 'default' ? left.includedCount + 10000 : left.includedCount right_count = (siteLang === right.language) || right.language === 'default' ? right.includedCount + 10000 : right.includedCount // console.log(siteLang, left.language, left_count, right.language, right_count) if (left_count !== right_count) { return right_count - left_count } else if (left.hitCount !== right.hitCount) { return right.hitCount - left.hitCount } return right.id - left.id }) // const stats = languages.hits_stats.replace(/\\$\\{hits}/, resultItems.length) const stats = languages.map((item) => { if (item.lang === currentLanguage) { return `${item.hits_stats.replace(/\\$\\{hits}/, resultItems.length)}` } else { return `${item.hits_stats.replace(/\\$\\{hits}/, resultItems.length)}` } }).join('') container.innerHTML = `${resultItems.map(result => result.item).join('')}` statsItem.innerHTML = `${stats}` window.pjax && window.pjax.refresh(container) } $loadingStatus.textContent = '' } let loadFlag = false const $searchMask = document.getElementById('search-mask') const $searchDialog = document.querySelector('#local-search .search-dialog') // fix safari const fixSafariHeight = () => { if (window.innerWidth < 768) { $searchDialog.style.setProperty('--search-height', window.innerHeight + 'px') } } const openSearch = () => { const bodyStyle = document.body.style bodyStyle.width = '100%' bodyStyle.overflow = 'hidden' btf.animateIn($searchMask, 'to_show 0.5s') btf.animateIn($searchDialog, 'titleScale 0.5s') setTimeout(() => { input.focus() }, 300) if (!loadFlag) { !localSearch.isfetched && localSearch.fetchData() input.addEventListener('input', inputEventFunction) loadFlag = true } // shortcut: ESC document.addEventListener('keydown', function f (event) { if (event.code === 'Escape') { closeSearch() document.removeEventListener('keydown', f) } }) fixSafariHeight() window.addEventListener('resize', fixSafariHeight) } const closeSearch = () => { const bodyStyle = document.body.style bodyStyle.width = '' bodyStyle.overflow = '' btf.animateOut($searchDialog, 'search_close .5s') btf.animateOut($searchMask, 'to_hide 0.5s') window.removeEventListener('resize', fixSafariHeight) } const searchClickFn = () => { btf.addEventListenerPjax(document.querySelector('#search-button > .search'), 'click', openSearch) } const searchFnOnce = () => { document.querySelector('#local-search .search-close-button').addEventListener('click', closeSearch) $searchMask.addEventListener('click', closeSearch) if (GLOBAL_CONFIG.localSearch.preload) { localSearch.fetchData() } localSearch.highlightSearchWords(document.getElementById('article-container')) } window.addEventListener('search:loaded', () => { const $loadDataItem = document.getElementById('loading-database') $loadDataItem.nextElementSibling.style.display = 'block' $loadDataItem.remove() }) searchClickFn() searchFnOnce() // pjax window.addEventListener('pjax:complete', () => { !btf.isHidden($searchMask) && closeSearch() localSearch.highlightSearchWords(document.getElementById('article-container')) searchClickFn() }) })","link":"/js/hexo-generator-searchdb-custom/dist/local-search.js"},{"title":"","text":"/** * Generate search database in JSON format * Refer to hexo-generator-searchdb * https://github.com/next-theme/hexo-generator-searchdb/blob/main/dist/search.js * * No Changes */ 'use strict'; module.exports = function(locals) { const config = this.config; const database = require('./database')(locals, config); return { path: config.search.path, data: JSON.stringify(database) }; };","link":"/js/hexo-generator-searchdb-custom/lib/json_generator.js"},{"title":"","text":"'use strict'; const micromatch = require('micromatch'); const template = require('./template'); module.exports = function(locals) { const { config } = this; const { sitemap, skip_render } = config; const { tags: tagsCfg, categories: catsCfg } = sitemap; const skipRenderList = [ '**/*.js', '**/*.css' ]; if (Array.isArray(skip_render)) { skipRenderList.push(...skip_render); } else if (typeof skip_render === 'string') { if (skip_render.length > 0) { skipRenderList.push(skip_render); } } const posts = [].concat(locals.posts.toArray(), locals.pages.toArray()) .filter(post => { return post.sitemap !== false && !isMatch(post.source, skipRenderList); }) .sort((a, b) => { return b.updated - a.updated; }); if (posts.length","link":"/js/hexo-generator-sitemap-custom/lib/generator.js"},{"title":"","text":"/** * Generate search.xml * Refer to hexo-generator-searchdb * https://github.com/next-theme/hexo-generator-searchdb/blob/main/dist/search.js * * No Changes */ 'use strict'; const path = require('path'); const fs = require('fs'); const nunjucks = require('nunjucks'); const env = new nunjucks.Environment(); const searchTmplSrc = path.join(__dirname, '../templates/search.xml'); const searchTmpl = nunjucks.compile(fs.readFileSync(searchTmplSrc, 'utf8'), env); module.exports = function(locals) { const config = this.config; const database = require('./database')(locals, config); const xml = searchTmpl.render({ articles: database, config : config.search }); return { path: config.search.path, data: xml }; };","link":"/js/hexo-generator-searchdb-custom/lib/xml_generator.js"},{"title":"","text":"'use strict'; const { url_for } = require('hexo-util'); function relSitemapInject(data) { const { path, rel } = this.config.sitemap; if (!rel || data.match(/rel=['|\"]?sitemap['|\"]?/i)) return; const relSitemap = ``; return data.replace(/(?!).+?/, str => str.replace('', `${relSitemap}`)); } module.exports = relSitemapInject;","link":"/js/hexo-generator-sitemap-custom/lib/rel.js"},{"title":"","text":"'use strict'; const { join, extname } = require('path'); const { readFileSync } = require('fs'); let sitemapTmpl; const { encodeURL } = require('hexo-util'); module.exports = function(config) { const path = config.sitemap.path; const nunjucks = require('nunjucks'); const env = new nunjucks.Environment(null, { autoescape: false, watch: false }); env.addFilter('uriencode', str => { return encodeURL(str); }); // Extract date from datetime env.addFilter('formatDate', input => { return input.toISOString().substring(0, 10); }); function temp(p) { let sitemapSrc; switch (extname(p)) { case '.xml': sitemapSrc = config.sitemap.template || join(__dirname, '../sitemap.xml'); break; case '.txt': sitemapSrc = config.sitemap.template_txt || join(__dirname, '../sitemap.txt'); break; } sitemapTmpl = nunjucks.compile(readFileSync(sitemapSrc, 'utf8'), env); return { path: p, data: sitemapTmpl }; } const res = []; switch (typeof path) { case 'string': res.push(temp(path)); break; case 'object': for (const p of path) { res.push(temp(p)); } break; } return res; };","link":"/js/hexo-generator-sitemap-custom/lib/template.js"}],"posts":[{"title":"Highlight.js Test Code","text":"이 게시물은 한글과 영어로 동시에 작성되어 있습니다. If you want to see in English, please change the language by clicking the right-bottom gear button. This post is written in both Korean and English. 한글로 보시려면 페이지 우측 하단의 톱니바퀴 버튼을 눌러 언어를 변경하세요. This article is for testing my blog’s customized highlight color scheme. All the example source codes are scratched from highlight.js official site. Supported languages and their abbreviations can be found from highlight.js github page. If you want to test for your own blog, use this markdown file rather than copying it manually. 이 게시물은 제 블로그의 highlight color scheme을 테스트하기 위한 목적으로 작성되었습니다. 모든 예제 코드는 highlight.js 공식 사이트에서 그대로 긁어온 자료입니다. 지원하는 프로그래밍 언어의 종류와 줄임말은 highlight.js 깃헙 페이지에서 확인할 수 있습니다. 만일 직접 테스트해보고 싶으시다면, 공홈에서 수동으로 복붙하지 마시고 이 마크다운 파일을 다운받아 사용하세요. HTML, XML 12345678910111213&lt;!DOCTYPE html&gt;&lt;title&gt;Title&lt;/title&gt;&lt;style&gt;body {width: 500px;}&lt;/style&gt;&lt;script type=&quot;application/javascript&quot;&gt; function $init() {return true;}&lt;/script&gt;&lt;body&gt; &lt;p checked class=&quot;title&quot; id='title'&gt;Title&lt;/p&gt; &lt;!-- here goes the rest of the page --&gt;&lt;/body&gt; Bash 1234567891011121314151617#!/bin/bash###### CONFIGACCEPTED_HOSTS=&quot;/root/.hag_accepted.conf&quot;BE_VERBOSE=falseif [ &quot;$UID&quot; -ne 0 ]then echo &quot;Superuser rights required&quot; exit 2figenApacheConf(){ echo -e &quot;# Host ${HOME_DIR}$1/$2 :&quot;}echo '&quot;quoted&quot;' | tr -d \\&quot; &gt; text.txt C++ 1234567891011121314#include &lt;iostream&gt;int main(int argc, char *argv[]) { /* An annoying &quot;Hello World&quot; example */ for (auto i = 0; i &lt; 0xFFFF; i++) cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; endl; char c = '\\n'; unordered_map &lt;string, vector&lt;string&gt; &gt; m; m[&quot;key&quot;] = &quot;\\\\\\\\&quot;; // this is an error return -2e3 + 12l;} C# 1234567891011121314151617using System.IO.Compression;#pragma warning disable 414, 3021namespace MyApplication{ [Obsolete(&quot;...&quot;)] class Program : IInterface { public static List&lt;int&gt; JustDoIt(int count) { Span&lt;int&gt; numbers = stackalloc int[length]; Console.WriteLine($&quot;Hello {Name}!&quot;); return new List&lt;int&gt;(new int[] { 1, 2, 3 }) } }} CSS 12345678910111213141516@font-face { font-family: Chunkfive; src: url('Chunkfive.otf');}body, .usertext { color: #F0F0F0; background: #600; font-family: Chunkfive, sans; --heading-1: 30px/32px Helvetica, sans-serif;}@import url(print.css);@media print { a[href^=http]::after { content: attr(href) }} Markdown 12345678910111213141516171819202122# hello worldyou can write text [with links](http://example.com) inline or [link references][1].* one _thing_ has *em*phasis* two __things__ are **bold**[1]: http://example.com---hello world===========&lt;this_is inline=&quot;xml&quot;&gt;&lt;/this_is&gt;&gt; markdown is so cool so are code segments1. one thing (yeah!)2. two thing `i can write code`, and `more` wipee! Diff 123456789101112131415161718192021222324252627282930Index: languages/ini.js===================================================================--- languages/ini.js (revision 199)+++ languages/ini.js (revision 200)@@ -1,8 +1,7 @@ hljs.LANGUAGES.ini = { case_insensitive: true,- defaultMode:- {+ defaultMode: { contains: ['comment', 'title', 'setting'], illegal: '[^\\\\s]' },*** /path/to/original timestamp--- /path/to/new timestamp****************** 1,3 ****--- 1,9 ----+ This is an important+ notice! It should+ therefore be located at+ the beginning of this+ document!! compress the size of the! changes. It is important to spell Ruby 12345678910111213# The Greeter classclass Greeter def initialize(name) @name = name.capitalize end def salute puts &quot;Hello #{@name}!&quot; endendg = Greeter.new(&quot;world&quot;)g.salute Go 123456789101112package mainimport &quot;fmt&quot;func main() { ch := make(chan float64) ch &lt;- 1.0e10 // magic number x, ok := &lt;- ch defer fmt.Println(`exitting now\\`) go println(len(&quot;hello world!&quot;)) return} TOML, INI 123456789101112; boilerplate[package]name = &quot;some_name&quot;authors = [&quot;Author&quot;]description = &quot;This is \\a description&quot;[[lib]]name = ${NAME}default = Trueauto = nocounter = 1_000 Java 12345678910111213141516/** * @author John Smith &lt;john.smith@example.com&gt;*/package l2f.gameserver.model;public abstract strictfp class L2Char extends L2Object { public static final Short ERROR = 0x0001; public void moveTo(int x, int y, int z) { _ai = null; log(&quot;Should not be called&quot;); if (1 &gt; 5) { // wtf!? return; } }} JavaScript 123456789101112131415161718192021function $initHighlight(block, cls) { try { if (cls.search(/\\bno\\-highlight\\b/) != -1) return process(block, true, 0x0F) + ` class=&quot;${cls}&quot;`; } catch (e) { /* handle exception */ } for (var i = 0 / 2; i &lt; classes.length; i++) { if (checkCondition(classes[i]) === undefined) console.log('undefined'); } return ( &lt;div&gt; &lt;web-component&gt;{block}&lt;/web-component&gt; &lt;/div&gt; )}export $initHighlight; JSON 123456789101112[ { &quot;title&quot;: &quot;apples&quot;, &quot;count&quot;: [12000, 20000], &quot;description&quot;: {&quot;text&quot;: &quot;...&quot;, &quot;sensitive&quot;: false} }, { &quot;title&quot;: &quot;oranges&quot;, &quot;count&quot;: [17500, null], &quot;description&quot;: {&quot;text&quot;: &quot;...&quot;, &quot;sensitive&quot;: false} }] Kotlin 1234567891011121314151617181920212223242526272829import kotlinx.serialization.Serializableimport kotlin.random.Randominterface Building@Serializableclass House( private val rooms: Int? = 3, val name: String = &quot;Palace&quot;) : Building { var residents: Int = 4 get() { println(&quot;Current residents: $field&quot;) return field } fun burn(evacuation: (people: Int) -&gt; Boolean) { rooms ?: return if (evacuation((0..residents).random())) residents = 0 }}fun main() { val house = House(name = &quot;Skyscraper 1&quot;) house.burn { Random.nextBoolean() }} Less 123456789101112131415161718192021222324252627@import &quot;fruits&quot;;@rhythm: 1.5em;@media screen and (min-resolution: 2dppx) { body {font-size: 125%}}section &gt; .foo + #bar:hover [href*=&quot;less&quot;] { margin: @rhythm 0 0 @rhythm; padding: calc(5% + 20px); background: #f00ba7 url(http://placehold.alpha-centauri/42.png) no-repeat; background-image: linear-gradient(-135deg, wheat, fuchsia) !important ; background-blend-mode: multiply;}@font-face { font-family: /* ? */ 'Omega'; src: url('../fonts/omega-webfont.woff?v=2.0.2');}.icon-baz::before { display: inline-block; font-family: &quot;Omega&quot;, Alpha, sans-serif; content: &quot;\\f085&quot;; color: rgba(98, 76 /* or 54 */, 231, .75);} Lua 1234567891011121314151617181920212223242526272829303132--[[Simple signal/slot implementation]]local signal_mt = { __index = { register = table.insert }}function signal_mt.__index:emit(... --[[ Comment in params ]]) for _, slot in ipairs(self) do slot(self, ...) endendlocal function create_signal() return setmetatable({}, signal_mt)end-- Signal testlocal signal = create_signal()signal:register(function(signal, ...) print(...)end)signal:emit('Answer to Life, the Universe, and Everything:', 42)--[==[ [=[ [[Nested ]]multi-line ]=]comment ]==][==[ Nested[=[ multi-line[[ string]] ]=] ]==] Makefile 12345678910111213# MakefileBUILDDIR = _buildEXTRAS ?= $(BUILDDIR)/extras.PHONY: main cleanmain: @echo &quot;Building main facility...&quot; build_main $(BUILDDIR)clean: rm -rf $(BUILDDIR)/* Perl 1234567891011121314151617181920212223242526272829303132333435363738394041# loads objectsub load{ my $flds = $c-&gt;db_load($id,@_) || do { Carp::carp &quot;Can`t load (class: $c, id: $id): '$!'&quot;; return undef }; my $o = $c-&gt;_perl_new(); $id12 = $id / 24 / 3600; $o-&gt;{'ID'} = $id12 + 123; #$o-&gt;{'SHCUT'} = $flds-&gt;{'SHCUT'}; my $p = $o-&gt;props; my $vt; $string =~ m/^sought_text$/; $items = split //, 'abc'; $string //= &quot;bar&quot;; for my $key (keys %$p) { if(${$vt.'::property'}) { $o-&gt;{$key . '_real'} = $flds-&gt;{$key}; tie $o-&gt;{$key}, 'CMSBuilder::Property', $o, $key; } } $o-&gt;save if delete $o-&gt;{'_save_after_load'}; # GH-117 my $g = glob(&quot;/usr/bin/*&quot;); return $o;}__DATA__@@ layouts/default.html.ep&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt;&lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;&lt;/head&gt; &lt;body&gt;&lt;%= content %&gt;&lt;/body&gt;&lt;/html&gt;__END__=head1 NAMEPOD till the end of file Objective-C 12345678910111213#import &lt;UIKit/UIKit.h&gt;#import &quot;Dependency.h&quot;@protocol WorldDataSource@optional- (NSString*)worldName;@required- (BOOL)allowsToLive;@end@property (nonatomic, readonly) NSString *title;- (IBAction) show;@end PHP 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172require_once 'Zend/Uri/Http.php';namespace Location\\Web;interface Factory{ static function _factory();}abstract class URI extends BaseURI implements Factory{ abstract function test(); public static $st1 = 1; const ME = &quot;Yo&quot;; var $list = NULL; private $var; /** * Returns a URI * * @return URI */ static public function _factory($stats = array(), $uri = 'http') { echo __METHOD__; $uri = explode(':', $uri, 0b10); $schemeSpecific = isset($uri[1]) ? $uri[1] : ''; $desc = 'Multiline description'; // Security check if (!ctype_alnum($scheme)) { throw new Zend_Uri_Exception('Illegal scheme'); } $this-&gt;var = 0 - self::$st; $this-&gt;list = list(Array(&quot;1&quot;=&gt; 2, 2=&gt;self::ME, 3 =&gt; \\Location\\Web\\URI::class)); return [ 'uri' =&gt; $uri, 'value' =&gt; null, ]; }}match ($key) { 1 =&gt; 'Integer 1', '1' =&gt; 'String 1', true =&gt; 'Bool true', [] =&gt; 'Empty array', [1] =&gt; 'Array [1]',};enum Foo: string { case Test = 'test';}match ($key) { 1 =&gt; 'Integer 1', '1' =&gt; 'String 1', true =&gt; 'Bool true', [] =&gt; 'Empty array', [1] =&gt; 'Array [1]',};echo URI::ME . URI::$st1;__halt_compiler () ; dataheredataheredatahere */datahere Python 123456789101112@requires_authorization(roles=[&quot;ADMIN&quot;])def somefunc(param1='', param2=0): r'''A docstring''' if param1 &gt; param2: # interesting print 'Gre\\'ater' return (param2 - param1 + 1 + 0b10l) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' R 12345678910111213141516171819202122232425262728293031323334353637383940414243444546require(stats)#' Compute different averages#'#' @param x \\code{numeric} vector of sample data#' @param type \\code{character} vector of length 1 specifying the average type#' @return \\code{centre} returns the sample average according to the chosen method.#' @examples#' centre(rcauchy(10), &quot;mean&quot;)#' @exportcentre &lt;- function(x, type) { switch(type, mean = mean(x), median = median(x), trimmed = mean(x, trim = .1))}x &lt;- rcauchy(10)centre(x, &quot;mean&quot;)library(ggplot2)models &lt;- tibble::tribble( ~model_name, ~ formula, &quot;length-width&quot;, Sepal.Length ~ Petal.Width + Petal.Length, &quot;interaction&quot;, Sepal.Length ~ Petal.Width * Petal.Length)iris %&gt;% nest_by(Species) %&gt;% left_join(models, by = character()) %&gt;% rowwise(Species, model_name) %&gt;% mutate(model = list(lm(formula, data = data))) %&gt;% summarise(broom::glance(model))#&gt; `summarise()` regrouping output by 'Species', 'model_name' (override with `.groups` argument)#&gt; # A tibble: 6 x 13#&gt; # Groups: Species, model_name [6]#&gt; Species model_name r.squared adj.r.squared sigma statistic p.value df#&gt; &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;#&gt; 1 setosa length-wi… 0.112 0.0739 0.339 2.96 6.18e- 2 3#&gt; 2 setosa interacti… 0.133 0.0760 0.339 2.34 8.54e- 2 4#&gt; 3 versic… length-wi… 0.574 0.556 0.344 31.7 1.92e- 9 3#&gt; 4 versic… interacti… 0.577 0.549 0.347 20.9 1.11e- 8 4#&gt; 5 virgin… length-wi… 0.747 0.736 0.327 69.3 9.50e-15 3#&gt; 6 virgin… interacti… 0.757 0.741 0.323 47.8 3.54e-14 4#&gt; # … with 5 more variables: logLik &lt;dbl&gt;, AIC &lt;dbl&gt;, BIC &lt;dbl&gt;, deviance &lt;dbl&gt;,#&gt; # df.residual &lt;int&gt; Rust 12345678910111213141516#[derive(Debug)]pub enum State { Start, Transient, Closed,}impl From&lt;&amp;'a str&gt; for State { fn from(s: &amp;'a str) -&gt; Self { match s { &quot;start&quot; =&gt; State::Start, &quot;closed&quot; =&gt; State::Closed, _ =&gt; unreachable!(), } }} SCSS 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273@import &quot;compass/reset&quot;;// variables$colorGreen: #008000;$colorGreenDark: darken($colorGreen, 10);@mixin container { max-width: 980px;}// mixins with parameters@mixin button($color:green) { @if ($color == green) { background-color: #008000; } @else if ($color == red) { background-color: #B22222; }}button { @include button(red);}div,.navbar,#header,input[type=&quot;input&quot;] { font-family: &quot;Helvetica Neue&quot;, Arial, sans-serif; width: auto; margin: 0 auto; display: block;}.row-12 &gt; [class*=&quot;spans&quot;] { border-left: 1px solid #B5C583;}// nested definitionsul { width: 100%; padding: { left: 5px; right: 5px; } li { float: left; margin-right: 10px; .home { background: url('http://placehold.it/20') scroll no-repeat 0 0; } }}.banner { @extend .container;}a { color: $colorGreen; &amp;:hover { color: $colorGreenDark; } &amp;:visited { color: #c458cb; }}@for $i from 1 through 5 { .span#{$i} { width: 20px*$i; }}@mixin mobile { @media screen and (max-width : 600px) { @content; }} Shell Session 1234567891011$ echo $EDITORvim$ git checkout mainSwitched to branch 'main'Your branch is up-to-date with 'origin/main'.$ git pushEverything up-to-date$ echo 'All&gt; done!'Alldone! SQL 123456789101112CREATE TABLE &quot;topic&quot; ( &quot;id&quot; integer NOT NULL PRIMARY KEY, &quot;forum_id&quot; integer NOT NULL, &quot;subject&quot; varchar(255) NOT NULL);ALTER TABLE &quot;topic&quot;ADD CONSTRAINT forum_id FOREIGN KEY (&quot;forum_id&quot;)REFERENCES &quot;forum&quot; (&quot;id&quot;);-- Initialsinsert into &quot;topic&quot; (&quot;forum_id&quot;, &quot;subject&quot;)values (2, 'D''artagnian'); Swift 123456789101112131415import Foundation@objc class Person: Entity { var name: String! var age: Int! init(name: String, age: Int) { /* /* ... */ */ } // Return a descriptive string for this person func description(offset: Int = 0) -&gt; String { return &quot;\\(name) is \\(age + offset) years old&quot; }} YAML 123456789101112131415161718192021222324252627282930313233343536373839---# commentstring_1: &quot;Bar&quot;string_2: 'bar'string_3: barinline_keys_ignored: sompath/name/file.jpgkeywords_in_yaml: - true - false - TRUE - FALSE - 21 - 21.0 - !!str 123&quot;quoted_key&quot;: &amp;foobar bar: foo foo: &quot;foo&quot;: barreference: *foobarmultiline_1: | Multiline Stringmultiline_2: &gt; Multiline Stringmultiline_3: &quot; Multiline string &quot;ansible_variables: &quot;foo {{variable}}&quot;array_nested:- a- b: 1 c: 2- b- comment TypeScript 1234567891011121314class MyClass { public static myValue: string; constructor(init: string) { this.myValue = init; }}import fs = require(&quot;fs&quot;);module MyModule { export interface MyInterface extends Other { myProperty: any; }}declare magicNumber number;myArray.forEach(() =&gt; { }); // fat arrow syntax Visual Basic .NET 123456789101112131415161718192021222324252627282930313233343536373839404142Imports SystemImports System.IO#Const DEBUG = TrueNamespace Highlighter.Test ''' &lt;summary&gt;This is an example class.&lt;/summary&gt; Public Class Program Protected Shared hello As Integer = 3 Private Const ABC As Boolean = False#Region &quot;Code&quot; ' Cheers! &lt;STAThread()&gt; _ Public Shared Sub Main(ByVal args() As String, ParamArray arr As Object) Handles Form1.Click On Error Resume Next If ABC Then While ABC : Console.WriteLine() : End While For i As Long = 0 To 1000 Step 123 Try System.Windows.Forms.MessageBox.Show(CInt(&quot;1&quot;).ToString()) Catch ex As Exception ' What are you doing? Well... Dim exp = CType(ex, IOException) REM ORZ Return End Try Next Else Dim l As New System.Collections.List&lt;String&gt;() SyncLock l If TypeOf l Is Decimal And l IsNot Nothing Then RemoveHandler button1.Paint, delegate End If Dim d = New System.Threading.Thread(AddressOf ThreadProc) Dim a = New Action(Sub(x, y) x + y) Static u = From x As String In l Select x.Substring(2, 4) Where x.Length &gt; 0 End SyncLock Do : Laugh() : Loop Until hello = 4 End If End Sub#End Region End ClassEnd Namespace","link":"/posts/highlight-test-code/"},{"title":"Hello World","text":"소개 Hexo에 오신 것을 환영합니다! 이 게시물은 Hexo 기본 템플릿에서 제공하는 첫 게시물에 대한 한글 번역본입니다. 자세한 내용은 Hexo 문서에서 확인하세요. Hexo 사용 시 문제가 발생하면 troubleshooting 에서 답을 찾거나 GitHub를 통해 문의할 수 있습니다. 빠른 시작 새 게시물 만들기 1$ hexo new &quot;My New Post&quot; 추가 정보: Writing 서버 실행 1$ hexo server 추가 정보: Server 정적 파일 생성 1$ hexo generate 추가 정보: Generating 원격 사이트로 배포 1$ hexo deploy 추가 정보: Deployment","link":"/posts/ko/hello-world/"}],"tags":[{"name":"markdown","slug":"markdown","link":"ko/tags/markdown/"},{"name":"test code","slug":"test-code","link":"ko/tags/test-code/"},{"name":"highlight.js","slug":"highlight-js","link":"ko/tags/highlight-js/"},{"name":"syntax highlighting","slug":"syntax-highlighting","link":"ko/tags/syntax-highlighting/"},{"name":"quick start","slug":"quick-start","link":"ko/tags/quick-start/"}],"categories":[{"name":"JavaScript","slug":"JavaScript","link":"ko/categories/JavaScript/"},{"name":"Node.js","slug":"JavaScript/Node-js","link":"ko/categories/JavaScript/Node-js/"},{"name":"Hexo","slug":"JavaScript/Node-js/Hexo","link":"ko/categories/JavaScript/Node-js/Hexo/"}]}